import numpy
import cv2
from scipy.spatial import Delaunay
import tools_IO
import tools_image
import tools_GL3D
# ---------------------------------------------------------------------------------------------------------------------
import time
import detector_landmarks
import tools_wavefront
# ---------------------------------------------------------------------------------------------------------------------
D = detector_landmarks.detector_landmarks('..//_weights//shape_predictor_68_face_landmarks.dat')
# ---------------------------------------------------------------------------------------------------------------------
capturing_devices = ['cam','mp4','image']
#camera_W, camera_H = 640, 480
camera_W, camera_H = 912, 1024
# ---------------------------------------------------------------------------------------------------------------------
def process_key(key):

    global list_filenames,filename_actor
    global image_actor_default

    if key in [ord('a'),ord('d'),ord('w'),ord('s')]:
        idx = tools_IO.smart_index(list_filenames, filename_actor)[0]
        if key in [ord('d'),ord('w')]:
            idx  =(idx+1)%len(list_filenames)
        else:
            idx = (idx-1+len(list_filenames)) % len(list_filenames)
        filename_actor = list_filenames[idx]

        image_actor_default = cv2.imread(folder_in + filename_actor)
        image_actor_default = tools_image.smart_resize(image_actor_default, camera_H, camera_W)

    return
# ---------------------------------------------------------------------------------------------------------------------
def demo_live(filename_obj):


    R = tools_GL3D.render_GL3D(filename_obj=filename_obj, W=camera_W, H=camera_H,is_visible=False,
                               do_transform_view=True,
                               do_normalize_model_file=True)

    if capturing_device == 'cam':
        cap = cv2.VideoCapture(0)
        cap.set(3, camera_W)
        cap.set(4, camera_H)
    elif capturing_device == 'mp4':
        cap = cv2.VideoCapture(filename_actor)

    cnt, start_time, fps = 0, time.time(), 0
    while (True):

        if capturing_device == 'image':
            image_actor = image_actor_default.copy()
        else:
            ret, image_actor = cap.read()
            if capturing_device=='mp4':
                xxx = tools_image.smart_resize(image_actor,camera_H,camera_W)
                cv2.imwrite('./images/output/A.jpg',xxx)
                image_actor = cv2.imread('./images/output/A.jpg')
            if capturing_device=='cam':
                cv2.flip(image_actor, 1)

        L = D.get_landmarks(image_actor)
        if D.are_landmarks_valid(L):
            del_triangles = Delaunay(L).vertices
            result = D.draw_landmarks_v2(image_actor,L,del_triangles)
            r_vec, t_vec = D.get_pose(image_actor,L)
            #result = D.draw_annotation_box(result,r_vec, t_vec)

            image_3d = R.get_image(r_vec,t_vec)
            clr = (255 * numpy.array(R.bg_color)).astype(numpy.int)
            result = tools_image.blend_avg(image_actor, image_3d, clr, weight=0)

        else:
            result = image_actor.copy()

        if time.time() > start_time: fps = cnt / (time.time() - start_time)
        result = cv2.putText(result, '{0: 1.1f} {1}'.format(fps, ' fps'), (0, 15), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(0, 0, 0), 1, cv2.LINE_AA)
        cv2.imshow('frame', result)

        cnt += 1
        key = cv2.waitKey(1)
        process_key(key)
        if key & 0xFF == 27: break

    if capturing_device == 'cam':cap.release()
    cv2.destroyAllWindows()
    return
# ---------------------------------------------------------------------------------------------------------------------
def export_model():
    raw_value = [-0.6435846306943956,-0.04072943374418145,-0.10155990310737245,
-0.6394325968329577,0.10111413336795927,-0.07698381349802323,
-0.618077712900936,0.2361263667757441,-0.08035555938010926,
-0.5638841975571798,0.3674279063528747,-0.00952498329751661,
-0.5123621944292874,0.548558646131121,0.07239068484338244,
-0.44601002076425333,0.6693336181946097,0.18058002565358525,
-0.3681688105378992,0.7810715144017433,0.3353183907572187,
-0.2464364006108733,0.8522051800962223,0.554088210847435,
0.0007508835314467416,0.8517403154589989,0.6899640056173846,
0.2833354079128651,0.8324594102647291,0.5252023825789461,
0.40113197565227904,0.7522072495493733,0.3216588399355823,
0.4614294533333237,0.6570842593730787,0.19022807578515394,
0.520003822542805,0.5428273481726276,0.09031999313207179,
0.5526431556941882,0.42934981419659113,0.03426660854228627,
0.6171700210742892,0.22422672647782493,-0.07364590279671002,
0.6463165193643247,0.04387079858416007,-0.1054843871697588,
0.6502198088503752,-0.049596931101667116,-0.11638329317415358,
-0.4907686338256894,-0.12469484965422999,0.5024944721277029,
-0.43639619066435925,-0.19356706507032134,0.578991540197562,
-0.33578404415278906,-0.21955996423034083,0.6352618967285502,
-0.23438659056861633,-0.2165849563468225,0.6464069592355483,
-0.14192061758647928,-0.16299195338392097,0.6348662990217031,
0.14246483286338682,-0.20772170166174844,0.6564385706568208,
0.2364533631704868,-0.22935983592817633,0.6512910021043816,
0.3036112334235587,-0.2292822665426808,0.6450362164228786,
0.38982755010266495,-0.2082783515184879,0.612991258921657,
0.4527857999738525,-0.18398188065693732,0.5596802189191039,
0.0015590811996136766,-0.08567123493238915,0.7057384151054282,
0.0032882200829147945,-0.012221392154070275,0.7589403335191559,
0.0004686831549264303,0.06703081018044876,0.8108046828469846,
0.000153976835187003,0.20068000837974226,0.8901458597509834,
-0.14704967138423755,0.27460908193277156,0.7141861133754956,
-0.0708448471105979,0.31049533675242386,0.7416827727298151,
-0.0026468594993917863,0.3227033547913151,0.7573936301692297,
0.09358460424049353,0.29684569836255575,0.7382839808188913,
0.16013049328357448,0.2513749948419544,0.6853883193556257,
-0.41994888400646657,-0.07053236614865284,0.533320788159682,
-0.3661382917228082,-0.13071464209703387,0.5929379697178734,
-0.2600787677844016,-0.12968211523162182,0.6134668954492731,
-0.16219400831666492,-0.0795814352603338,0.5718858672996282,
-0.24118085971633002,-0.04455247950303412,0.5970867835548987,
-0.35418977270210883,-0.036853227937612365,0.5949223311878233,
0.16302195170923395,-0.07789329443188264,0.5721745431017516,
0.24595589768335258,-0.13286462302163454,0.6088345636589514,
0.3465937153889842,-0.13063226218339885,0.6040563404261559,
0.4207841352050953,-0.0660532141838165,0.5334181568579096,
0.36066468461135903,-0.038750860729849124,0.592266217169844,
0.2541118296577233,-0.03890367029122892,0.6013056619605146,
-0.23385032428081973,0.5013021801479194,0.628058351492573,
-0.15940397327974548,0.4551857311131614,0.7297754147721504,
-0.0638992506637466,0.4372247435288682,0.766522972834131,
0.0007938037125580569,0.467728380654979,0.7641247566883991,
0.07869594115150834,0.4301110733749709,0.7611314880050222,
0.16428560867663755,0.45955042496137666,0.7273534976690169,
0.22344530828383335,0.5126317352454217,0.6236469862346591,
0.16343924552725905,0.5716510727248528,0.7011055248733994,
0.08031385230442917,0.5812402407694596,0.7350439632306426,
-0.007032461635524692,0.5884711439119228,0.7345829053119434,
-0.10720339479972739,0.5815531652654057,0.7252627884814442,
-0.1817967611990339,0.5636403180081996,0.686808736738225,
-0.18595235548286154,0.5149010055902243,0.6629362613858221,
-0.08419303808608479,0.5092449820323282,0.7186290397650458,
0.013149972544273636,0.5002694375899628,0.7468374640141663,
0.10812895757538908,0.48935514533963415,0.7355925176655322,
0.19431385690150824,0.4892595191793757,0.6879996210776653,
0.11959213866020346,0.529072827568892,0.7210160974100568,
0.01942282690017646,0.5410511565111921,0.7435989303399604,
-0.07946725327191442,0.5315575593662196,0.7364660999694181]
    model_points = numpy.array(raw_value, dtype=numpy.float32)
    model_points = numpy.reshape(model_points, (-1, 3))
    Ob = tools_wavefront.ObjLoader()
    Ob.export_mesh('./images/ex_GL/face/new_face.obj',model_points)
    return
# ---------------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':


    capturing_device = 'image'
    folder_in = './images/ex_faceswap/01/'
    list_filenames = tools_IO.get_filenames(folder_in, '*.jpg')
    filename_actor = list_filenames[0]

    #filename_actor = './images/output/A.jpg'
    #filename_actor = './images/ex_faceswap/01/Person2a.jpg'

    image_actor_default = cv2.imread(folder_in+filename_actor)
    image_actor_default = tools_image.smart_resize(image_actor_default, camera_H, camera_W)

    filename_face_obj = './images/ex_GL/face/face_norm.obj'
    demo_live(filename_face_obj)


